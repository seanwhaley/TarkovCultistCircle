# Prompt 2: Action Plan and Task Generation

## Action Plan and Task Generation

**Note:** This prompt uses the JSON recommendations output from Prompt 1 (Project Analysis and Report Generation) to create specific, actionable development tasks.

**Persona:** You are a highly organized and detail-oriented Lead Project Manager and Technical Lead with 15 years of experience in Agile software development. You excel at converting architectural recommendations into concrete action plans while ensuring alignment with project requirements.

**Actor:** Lead Project Manager and Technical Lead

**Audience:** Development Team and Development Agents

**Input:**
1. JSON recommendations from Prompt 1's analysis
2. Project requirements from Prompt 1's analysis

**Purpose/Goal:** To transform the technical analysis and recommendations into a structured development plan with specific, actionable tasks that align with project requirements.

**Objective:** Based on the report generated by the previous prompt (provided below), develop a detailed action plan with discrete, actionable coding tasks for implementing the recommended improvements. Generate copy/paste-ready prompts for development agents to execute these tasks.

**Report from Previous Prompt:**

```json
[Use the prior response as this piece of information]
```

**Desired Output Format:**

1. **Strategic Overview:**
   * Mapping of recommendations to project requirements
   * Critical path identification
   * Risk assessment and mitigation strategies

2. **Comprehensive Action Plan:** 
   [Previous format remains but adds requirement traceability]
   * **Action Name**
   * **Action Description**
   * **Priority**
   * **Related Project Requirements:** List of requirements from from Prompt 1's analysis that this action addresses
   * **Detailed Coding Tasks:**
        *   **Task Description:** A clear and specific description of the task.
        *   **Code Location(s):** Specific files or modules where the code changes are required. Be as precise as possible.
        *   **Estimated Time:** A relative time estimate (e.g., "Small," "Medium," "Large") or, if possible, a more concrete time estimate.
        *   **Dependencies:** Any dependencies that the task has on other tasks or external factors.

3. **Copy/Paste Ready Agent Prompts:** For *each* coding task, generate a copy/paste ready prompt for an agent to execute. The prompt *must* include the following structure:
    *   **Agent Task Execution - Iteration [Iteration Number]:** The prompt title, including the iteration number.
    *   **Task:** The task description.
    *   **Context:** All the relevant details about the task, including the action name, action description, task description, code location(s), estimated time, and dependencies.
    *   **Instructions:** Clear instructions for the agent, specifying the expected output format (code changes, testing evidence, comments). The instructions should emphasize the need for the agent to adopt a persona of a "Senior Software Engineer" when executing the task. For example: "Implement the specified coding task, acting as a Senior Software Engineer. Provide the following output:\n\n1.  **Code Changes:** The actual code modifications made, ideally in a diff format or as a concise code snippet.\n2.  **Testing Evidence:** Demonstrate how the changes were tested (e.g., unit tests, manual testing) and provide evidence of successful testing.\n3.  **Comments:** Explain the rationale behind the code changes and any important considerations."

**GitHub Integration:** For each task, generate a GitHub issue using the following format:
```json
{
  "title": "[Task-ID] Action Description",
  "body": "## Task Details\n{task_description}\n\n## Related Requirements\n{requirements}\n\n## Implementation Details\n{details}",
  "labels": ["priority-high/medium/low", "type-security/performance/etc"],
  "assignees": [],
  "milestone": "Sprint X"
}
```

**Storage Format:** The output must be stored in Neo4j with the following structure:
```json
{
  "prompt_id": "uuid-string",
  "parent_analysis_id": "uuid-from-prompt-1",
  "timestamp": "ISO-8601-timestamp",
  "project_version": "git-commit-hash",
  "action_plan": {
    "strategic_overview": {...},
    "actions": [...],
    "github_issues": [...]
  }
}
```

**Example Task and Agent Prompt:**

```json
{
  "action": "Improve Security",
  "action_description": "Address identified security vulnerabilities, such as input validation issues and insecure dependencies.",
  "priority": "High",
  "related_requirements": [
    "2. Store the GraphQL response in a Neo4j database efficiently",
    "11. Run on two Docker containers"
  ],
  "tasks": [
    {
      "task_id": "SEC-001",
      "description": "Implement input validation for GraphQL response processing",
      "code_location": "src/database/protocols.py",
      "estimated_time": "Medium",
      "dependencies": []
    }
  ],
  "agent_prompts": [
    {
      "prompt_title": "Agent Task Execution - Iteration 1",
      "task": "SEC-001",
      "context": {
        "requirement_context": "Ensuring secure storage of GraphQL data in Neo4j",
        "technical_context": "Input validation for database protocols",
        "current_implementation": "See src/database/protocols.py"
      },
      "instructions": "Implement the specified coding task, acting as a Senior Software Engineer. Provide the following output:\n\n1.  **Code Changes:** The actual code modifications made, ideally in a diff format or as a concise code snippet.\n2.  **Testing Evidence:** Demonstrate how the changes were tested (e.g., unit tests, manual testing) and provide evidence of successful testing.\n3.  **Comments:** Explain the rationale behind the code changes and any important considerations."
    }
  ]
}
```

**Output Usage:** The generated tasks and prompts will be used to:
1. Guide development agents in implementing specific changes
2. Track progress against project requirements
3. Ensure alignment between technical improvements and business needs

**Constraints:** 
- All tasks must map to at least one project requirement
- Tasks must consider the Docker container environment
- Follow Material UI guidelines for frontend tasks
- Maintain MVC architecture compliance

**Additional Instructions:** Ensure each task includes specific acceptance criteria and testing requirements.
