Metadata-Version: 2.1
Name: tarkov-cultist-circle
Version: 1.0.0
Summary: Market optimization tool for Escape from Tarkov
Author: Your Name
Author-email: your.email@example.com
Requires-Python: >=3.9,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: fastapi (>=0.104.0,<0.105.0)
Requires-Dist: httpx (>=0.25.0,<0.26.0)
Requires-Dist: neo4j (>=5.12.0,<6.0.0)
Requires-Dist: neo4j-driver (>=4.4.0,<5.0.0)
Requires-Dist: pydantic (>=2.0.0,<3.0.0)
Requires-Dist: python-dotenv (>=1.0.0,<2.0.0)
Requires-Dist: python-jose (>=3.3.0,<4.0.0)
Requires-Dist: python-json-logger (>=2.0.0,<3.0.0)
Requires-Dist: redis (>=5.0.0,<6.0.0)
Requires-Dist: strawberry-graphql (>=0.209.0,<0.210.0)
Requires-Dist: structlog (>=23.2.0,<24.0.0)
Requires-Dist: uvicorn (>=0.23.0,<0.24.0)
Description-Content-Type: text/markdown

# TarkovCultistCircle

A sophisticated web application for optimizing Escape from Tarkov item combinations using advanced graph algorithms and Material Design.

## Core Features

- **Item Optimization Engine**
  - Find optimal combinations of 1-5 items
  - Smart price optimization algorithms
  - Customizable optimization criteria
  - Real-time market data integration

- **Advanced User Features**
  - Price override system with persistence
  - Temporary item blacklisting
  - Item locking for combination stability
  - Historical combination tracking
  - Data visualization tools

- **Technical Stack**
  - Flask web framework with async support
  - Neo4j graph database for relationship optimization
  - GraphQL API integration with api.tarkov.dev
  - Material Design 3 UI/UX
  - Docker containerization
  - Comprehensive test coverage

## Quick Start

1. Clone and setup:
   ```bash
   git clone <repository-url>
   cd TarkovCultistCircle
   python -m venv venv
   source venv/bin/activate  # or `venv\Scripts\activate` on Windows
   pip install -r requirements.txt
   ```

2. Configure environment:
   ```bash
   cp example.env .env
   # Edit .env with your configuration
   ```

3. Run with Docker:
   ```bash
   docker-compose up --build
   ```

   Or locally:
   ```bash
   python wsgi.py
   ```

## Documentation Structure

- **Setup and Usage**
  - [Installation Guide](docs/INSTALLATION.md)
  - [Build and Launch](docs/BUILD_AND_LAUNCH.md)
  - [Configuration Guide](docs/CONFIGURATION.md)

- **Architecture and Design**
  - [Architecture Overview](docs/ARCHITECTURE.md)
  - [Database Structure](docs/DB_STRUCTURE.md)
  - [API Reference](docs/API_REFERENCE.md)
  - [Component Documentation](docs/COMPONENTS.md)

- **Development**
  - [Contributing Guidelines](docs/CONTRIBUTING.md)
  - [GraphQL Queries](docs/GRAPHQL_QUERIES.md)
  - [Material Design Implementation](docs/MATERIAL_DESIGN.md)
  - [Testing Guide](docs/TESTING.md)

- **Project Management**
  - [Changelog](docs/CHANGELOG.md)
  - [Support](docs/SUPPORT.md)
  - [License](docs/LICENSE.md)

## Development Process

1. Check the [GitHub Issues](https://github.com/username/TarkovCultistCircle/issues) for current tasks
2. Fork and create a feature branch
3. Follow the [contribution guidelines](docs/CONTRIBUTING.md)
4. Submit a pull request

## Support

- Create an issue for bug reports
- Check [FAQ](docs/FAQ.md) for common questions
- See [SUPPORT.md](docs/SUPPORT.md) for contact information

## License

MIT License - See [LICENSE.md](docs/LICENSE.md)

